"""Add password_hash column

Revision ID: 286026c6dd77
Revises: 003
Create Date: 2025-07-20 12:40:20.071314

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '286026c6dd77'
down_revision: Union[str, Sequence[str], None] = '003'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('color', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_table('team_members',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('invited_by', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['invited_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.drop_table('permissions')
    op.drop_table('comments')
    op.drop_table('user_activities')
    op.add_column('issues', sa.Column('enhanced_description', sa.Text(), nullable=True))
    op.add_column('issues', sa.Column('assignee_id', sa.Integer(), nullable=True))
    op.add_column('issues', sa.Column('reporter_id', sa.Integer(), nullable=False))
    op.alter_column('issues', 'description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('issues', 'status',
               existing_type=postgresql.ENUM('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', name='issue_status'),
               type_=sa.Enum('OPEN', 'IN_PROGRESS', 'CLOSED', name='issuestatus'),
               nullable=False,
               existing_server_default=sa.text("'OPEN'::issue_status"))
    op.alter_column('issues', 'priority',
               existing_type=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issue_priority'),
               type_=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='issuepriority'),
               nullable=False,
               existing_server_default=sa.text("'MEDIUM'::issue_priority"))
    op.alter_column('issues', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('issues', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_issues_id'), 'issues', ['id'], unique=False)
    op.drop_constraint(op.f('issues_created_by_fkey'), 'issues', type_='foreignkey')
    op.drop_constraint(op.f('issues_assigned_to_fkey'), 'issues', type_='foreignkey')
    op.create_foreign_key(None, 'issues', 'users', ['reporter_id'], ['id'])
    op.create_foreign_key(None, 'issues', 'users', ['assignee_id'], ['id'])
    op.drop_column('issues', 'assigned_to')
    op.drop_column('issues', 'created_by')
    op.add_column('users', sa.Column('password_hash', sa.String(), nullable=False))
    op.add_column('users', sa.Column('first_name', sa.String(), nullable=True))
    op.add_column('users', sa.Column('last_name', sa.String(), nullable=True))
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('ADMIN', 'MANAGER', 'MEMBER', 'VIEWER', name='user_role'),
               type_=sa.Enum('ADMIN', 'MANAGER', 'MEMBER', 'VIEWER', name='userrole'),
               nullable=False,
               existing_server_default=sa.text("'MEMBER'::user_role"))
    op.alter_column('users', 'status',
               existing_type=postgresql.ENUM('ACTIVE', 'INACTIVE', 'AWAY', 'SUSPENDED', name='user_status'),
               type_=sa.Enum('ACTIVE', 'INACTIVE', 'AWAY', 'SUSPENDED', name='userstatus'),
               nullable=False,
               existing_server_default=sa.text("'ACTIVE'::user_status"))
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'hashed_password')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('full_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'status',
               existing_type=sa.Enum('ACTIVE', 'INACTIVE', 'AWAY', 'SUSPENDED', name='userstatus'),
               type_=postgresql.ENUM('ACTIVE', 'INACTIVE', 'AWAY', 'SUSPENDED', name='user_status'),
               nullable=True,
               existing_server_default=sa.text("'ACTIVE'::user_status"))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('ADMIN', 'MANAGER', 'MEMBER', 'VIEWER', name='userrole'),
               type_=postgresql.ENUM('ADMIN', 'MANAGER', 'MEMBER', 'VIEWER', name='user_role'),
               nullable=True,
               existing_server_default=sa.text("'MEMBER'::user_role"))
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'first_name')
    op.drop_column('users', 'password_hash')
    op.add_column('issues', sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('issues', sa.Column('assigned_to', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'issues', type_='foreignkey')
    op.drop_constraint(None, 'issues', type_='foreignkey')
    op.create_foreign_key(op.f('issues_assigned_to_fkey'), 'issues', 'users', ['assigned_to'], ['id'])
    op.create_foreign_key(op.f('issues_created_by_fkey'), 'issues', 'users', ['created_by'], ['id'])
    op.drop_index(op.f('ix_issues_id'), table_name='issues')
    op.alter_column('issues', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('issues', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('issues', 'priority',
               existing_type=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='issuepriority'),
               type_=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issue_priority'),
               nullable=True,
               existing_server_default=sa.text("'MEDIUM'::issue_priority"))
    op.alter_column('issues', 'status',
               existing_type=sa.Enum('OPEN', 'IN_PROGRESS', 'CLOSED', name='issuestatus'),
               type_=postgresql.ENUM('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', name='issue_status'),
               nullable=True,
               existing_server_default=sa.text("'OPEN'::issue_status"))
    op.alter_column('issues', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_column('issues', 'reporter_id')
    op.drop_column('issues', 'assignee_id')
    op.drop_column('issues', 'enhanced_description')
    op.create_table('user_activities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('activity_type', postgresql.ENUM('LOGIN', 'LOGOUT', 'CREATE_ISSUE', 'UPDATE_ISSUE', 'DELETE_ISSUE', 'CREATE_COMMENT', 'UPDATE_COMMENT', 'DELETE_COMMENT', 'UPDATE_PROFILE', 'CHANGE_ROLE', 'CHANGE_STATUS', name='activity_type'), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_activities_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_activities_pkey'))
    )
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('issue_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['issue_id'], ['issues.id'], name=op.f('comments_issue_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('comments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('comments_pkey'))
    )
    op.create_table('permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_type', postgresql.ENUM('CREATE_ISSUE', 'READ_ISSUE', 'UPDATE_ISSUE', 'DELETE_ISSUE', 'CREATE_COMMENT', 'READ_COMMENT', 'UPDATE_COMMENT', 'DELETE_COMMENT', 'MANAGE_USERS', 'MANAGE_ROLES', 'VIEW_ANALYTICS', 'MANAGE_PROJECTS', name='permission_type'), autoincrement=False, nullable=False),
    sa.Column('granted', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('permissions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('permissions_pkey')),
    sa.UniqueConstraint('user_id', 'permission_type', name=op.f('permissions_user_id_permission_type_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('team_members')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    # ### end Alembic commands ###
